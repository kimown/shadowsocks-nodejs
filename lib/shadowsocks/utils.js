// Generated by CoffeeScript 1.8.0

/*
  Copyright (c) 2014 clowwindy
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 */

'use strict';

(function() {
  var pack, printLocalHelp, printServerHelp, util, _logging_level;

  util = require('util');

  pack = require('../../package.json');

  var url = require('url');

  printLocalHelp = function() {
    return console.log("usage: sslocal [-h] -s SERVER_ADDR -p SERVER_PORT [-b LOCAL_ADDR] -l LOCAL_PORT -k PASSWORD -m METHOD [-t TIMEOUT] [-c config]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SERVER_ADDR        server address\n  -p SERVER_PORT        server port\n  -b LOCAL_ADDR         local binding address, default is 127.0.0.1\n  -l LOCAL_PORT         local port\n  -k PASSWORD           password\n  -m METHOD             encryption method, for example, aes-256-cfb\n  -t TIMEOUT            timeout in seconds\n  -c CONFIG             path to config file");
  };

  printServerHelp = function() {
    return console.log("usage: ssserver [-h] -s SERVER_ADDR -p SERVER_PORT -k PASSWORD -m METHOD [-t TIMEOUT] [-c config]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SERVER_ADDR        server address\n  -p SERVER_PORT        server port\n  -k PASSWORD           password\n  -m METHOD             encryption method, for example, aes-256-cfb\n  -t TIMEOUT            timeout in seconds\n  -c CONFIG             path to config file");
  };

  /**
   * 解析用户的自定参数
   * @param isServer  如果isServer不为空，判断为服务器；否则判定为客户端
   * @returns {{}|*}
     */
  exports.parseArgs = function(isServer) {


    var defination, lastKey, nextIsValue, oneArg, result, _, _ref;
    if (isServer == null) {
      isServer = false;
    }
    defination = {
      '-l': 'local_port',
      '-p': 'server_port',
      '-s': 'server',
      '-k': 'password',
      '-c': 'config_file',
      '-m': 'method',
      '-b': 'local_address',
      '-t': 'timeout'
    };

    //函数的返回值，主要是包装用户的自定参数
    result = {};

    nextIsValue = false;

    lastKey = null;

    //数组类型，用于存储用户的自定义参数，"node 所在位置是"+process.argv[0]+" ,启动的JS文件路径是+"+process.argv[1],其后的都是命令行的其他参数
    _ref = process.argv;

    for (_ in _ref) {
      // _代表数组下标   _ref[_]代表用户的设定的参数值，主要用于覆盖 defination 的值
      oneArg = _ref[_];


      if (nextIsValue) {
        result[lastKey] = oneArg;
        nextIsValue = false;
      } else if (oneArg in defination) {
        lastKey = defination[oneArg];
        nextIsValue = true;
      } else if ('-v' === oneArg) {
        //是否显示运行时的详细信息
        result['verbose'] = true;
      } else if (oneArg.indexOf('-') === 0) {
        if (isServer) {
          printServerHelp();
        } else {
          printLocalHelp();
        }
        process.exit(2);
      }
    }
    return result;
  };

  exports.checkConfig = function(config) {
    var _ref;
    if ((_ref = config.server) === '127.0.0.1' || _ref === 'localhost') {
      exports.warn("Server is set to " + config.server + ", maybe it's not correct");
      exports.warn("Notice server will listen at " + config.server + ":" + config.server_port);
    }
    if ((config.method || '').toLowerCase() === 'rc4') {
      return exports.warn('RC4 is not safe; please use a safer cipher, like AES-256-CFB');
    }
  };

  exports.version = "" + pack.name + " v" + pack.version;

  exports.EVERYTHING = 0;

  exports.DEBUG = 1;

  exports.INFO = 2;

  exports.WARN = 3;

  exports.ERROR = 4;

  _logging_level = exports.INFO;

  exports.config = function(level) {
    return _logging_level = level;
  };

  exports.log = function(level, msg) {
    if (level >= _logging_level) {
      if (level >= exports.DEBUG) {
        return util.log(new Date().getMilliseconds() + 'ms ' + msg);
      } else {
        return util.log(msg);
      }
    }
  };

  exports.debug = function(msg) {
    return exports.log(exports.DEBUG, msg);
  };

  exports.info = function(msg) {
    return exports.log(exports.INFO, msg);
  };

  exports.warn = function(msg) {
    return exports.log(exports.WARN, msg);
  };

  exports.error = function(msg) {
    return exports.log(exports.ERROR, (msg != null ? msg.stack : void 0) || msg);
  };

  exports.inetNtoa = function(buf) {
    return buf[0] + "." + buf[1] + "." + buf[2] + "." + buf[3];
  };

  exports.inetAton = function(ipStr) {
    var buf, i, parts;
    parts = ipStr.split(".");
    if (parts.length !== 4) {
      return null;
    } else {
      buf = new Buffer(4);
      i = 0;
      while (i < 4) {
        buf[i] = +parts[i];
        i++;
      }
      return buf;
    }
  };


  /**
   * 输出对象为JSON格式
   * // obj -> value to convert to a JSON string
   ＊// null -> (do nothing)
   ＊// 2 -> 2 spaces per indent level
   * @param obj
   * http://stackoverflow.com/questions/7428235/how-do-you-log-content-of-a-json-object-in-node-js
   */
  function prettyJSON(obj) {
    return JSON.stringify(obj, null, 2);
  }




    /**
     * 处理http协议中的GET和POST请求
     * @param data
     */
  module.exports.parseHttpRequest = function(data){
    if(data.toString().indexOf("GET")==0||data.toString().indexOf("POST")==0){

      //var _url = 'http://kkd.qianmi.com:8080/p/a/t/h?query=string#hash';
      //var k=url.parse(_url);



      let data2Ar =data.toString().split('\r\n');
      let Request_URL = data2Ar[1].split(':')[1]+data2Ar[0].split(' ')[1];
      let Request_Method = data2Ar[0].split(' ')[0];
      let Request_Vesion = data2Ar[0].split(' ')[2];

      //包括请求、响应的信息
      let General={
        Request_URL:Request_URL,
        Request_Method:Request_Method,
        Request_Vesion:Request_Vesion,
        Status_Code:'',
        Remote_Address:''
      };

      var Request_Headers_Ar = ['Host','Connection','Pragma','Cache-Control','Accept','Origin','User-Agent','Referer',
                              'Accept-Encoding','Accept-Language','Cookie'];
      var Request_Headers_Obj={};
      data2Ar.forEach((v,k)=>{
        Request_Headers_Ar.forEach((value,key)=>{
          if(v.indexOf(value+":")==0){
            //由于HTTP协议的无状态性，Cookie的在验证方面的特殊性和重要性，有必要输出格式化的Cookie
            if(value=="Cookie"){
              let _cookieVal =[];
              var cookie2str = v.split(value+': ')[1];
              //观察到每个K-V都相距一个空格
              cookie2str.split('; ').map((v,k)=>{
                let _cookieValObj={};
                _cookieValObj[v.split('=')[0]]=v.split('=')[1];
                _cookieVal.push(_cookieValObj);
              })
              Request_Headers_Obj[value]=_cookieVal;
            }else{
              //观察到每个K-V都额外相距一个空格
              Request_Headers_Obj[value]=v.split(value+': ')[1];
            }
          }
        })
      })
      console.log(prettyJSON(Request_Headers_Obj));
    }
  }

  setInterval(function() {
    var cwd, e, heapdump;
    if (_logging_level <= exports.DEBUG) {
      exports.debug(JSON.stringify(process.memoryUsage(), ' ', 2));
      if (global.gc) {
        exports.debug('GC');
        gc();
        exports.debug(JSON.stringify(process.memoryUsage(), ' ', 2));
        cwd = process.cwd();
        if (_logging_level === exports.DEBUG) {
          try {
            heapdump = require('heapdump');
            process.chdir('/tmp');
            return process.chdir(cwd);
          } catch (_error) {
            e = _error;
            return exports.debug(e);
          }
        }
      }
    }
  }, 1000);

}).call(this);
